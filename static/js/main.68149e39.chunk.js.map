{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","isReversed","setIsReversed","NONE","sortType","setSortType","visibleGoods","goods","console","log","ALPHABET","sort","a","b","localeCompare","LENGTH","length","reverse","getReorderedGoods","className","type","onClick","classNames","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KAmCE,IAAME,EAAgB,WAC3B,MAAoCC,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAgCF,mBAASH,EAASM,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KAEMC,EAjCD,SACLC,EAAiBH,EAAoBH,GAGrC,IAAMK,EAAY,YAAOC,GAMzB,OAFAC,QAAQC,IAAIL,EAAUH,GAEdG,GACN,KAAKP,EAASa,SACZJ,EAAaK,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,cAAcD,MAC5C,MAEF,KAAKhB,EAASkB,OACZT,EAAaK,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEI,OAASH,EAAEG,UAU7C,OAJIf,GACFK,EAAaW,UAGRX,EAOcY,CAAkBpB,EAAiBM,EAAUH,GAElE,OACE,sBAAKkB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLC,QAAS,WACPhB,EAAYR,EAASa,WAEvBS,UAAWG,IAAW,SAAU,UAAW,CACzC,WAAYlB,IAAaP,EAASa,WANtC,iCAYA,wBACEU,KAAK,SACLC,QAAS,WACPhB,EAAYR,EAASkB,SAEvBI,UAAWG,IAAW,SAAU,aAAc,CAC5C,WAAYlB,IAAaP,EAASkB,SANtC,4BAYA,wBACEK,KAAK,SACLC,QAAS,WACPnB,GAAeD,IAEjBkB,UAAWG,IAAW,SAAU,aAAc,CAC5C,YAAarB,IANjB,sBAYEA,GAAcG,IAAaP,EAASM,OAEpC,wBACEiB,KAAK,SACLC,QAAS,WACPnB,GAAc,GACdG,EAAYR,EAASM,OAEvBgB,UAAU,4BANZ,sBAaJ,6BACGb,EAAaiB,KAAI,SAAAC,GAAI,OACpB,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,YChHlCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.68149e39.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport classNames from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\nexport function getReorderedGoods(\n  goods: string[], sortType: SortType, isReversed: boolean,\n) {\n  // To avoid the original array mutation\n  const visibleGoods = [...goods];\n\n  // Sort and reverse goods if needed\n  // eslint-disable-next-line no-console\n  console.log(sortType, isReversed);\n\n  switch (sortType) {\n    case SortType.ALPHABET:\n      visibleGoods.sort((a, b) => a.localeCompare(b));\n      break;\n\n    case SortType.LENGTH:\n      visibleGoods.sort((a, b) => a.length - b.length);\n      break;\n\n    default: break;\n  }\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\nexport const App: React.FC = () => {\n  const [isReversed, setIsReversed] = useState(false);\n  const [sortType, setSortType] = useState(SortType.NONE);\n\n  const visibleGoods = getReorderedGoods(goodsFromServer, sortType, isReversed);\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          onClick={() => {\n            setSortType(SortType.ALPHABET);\n          }}\n          className={classNames('button', 'is-info', {\n            'is-light': sortType !== SortType.ALPHABET,\n          })}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={() => {\n            setSortType(SortType.LENGTH);\n          }}\n          className={classNames('button', 'is-success', {\n            'is-light': sortType !== SortType.LENGTH,\n          })}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={() => {\n            setIsReversed(!isReversed);\n          }}\n          className={classNames('button', 'is-warning', {\n            'is-light': !isReversed,\n          })}\n        >\n          Reverse\n        </button>\n\n        {(isReversed || sortType !== SortType.NONE)\n        && (\n          <button\n            type=\"button\"\n            onClick={() => {\n              setIsReversed(false);\n              setSortType(SortType.NONE);\n            }}\n            className=\"button is-danger is-light\"\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li data-cy=\"Good\" key={good}>{good}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}