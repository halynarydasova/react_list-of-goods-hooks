{"version":3,"sources":["App.tsx","index.tsx"],"names":["SortType","goodsFromServer","App","useState","isReversed","setIsReversed","NONE","sortType","setSortType","toShowResetButton","visibleGoods","goods","ALPHABET","sort","a","b","localeCompare","LENGTH","length","reverse","getReorderedGoods","className","type","onClick","classNames","map","good","ReactDOM","render","document","getElementById"],"mappings":"6KAkBKA,E,0EAbQC,EAAkB,CAC7B,YACA,SACA,OACA,YACA,QACA,QACA,OACA,QACA,MACA,W,SAGGD,O,eAAAA,I,uBAAAA,I,oBAAAA,M,KA+BE,IAAME,EAAgB,WAC3B,MAAoCC,oBAAS,GAA7C,mBAAOC,EAAP,KAAmBC,EAAnB,KACA,EAAgCF,mBAASH,EAASM,MAAlD,mBAAOC,EAAP,KAAiBC,EAAjB,KACMC,EAAoBL,GAAcG,IAAaP,EAASM,KACxDI,EA7BD,SACLC,EAAiBJ,EAAoBH,GAErC,IAAMM,EAAY,YAAOC,GAEzB,OAAQJ,GACN,KAAKP,EAASY,SACZF,EAAaG,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEE,cAAcD,MAC5C,MAEF,KAAKf,EAASiB,OACZP,EAAaG,MAAK,SAACC,EAAGC,GAAJ,OAAUD,EAAEI,OAASH,EAAEG,UAW7C,OAJId,GACFM,EAAaS,UAGRT,EAOcU,CAAkBnB,EAAiBM,EAAUH,GAmBlE,OACE,sBAAKiB,UAAU,kBAAf,UACE,sBAAKA,UAAU,UAAf,UACE,wBACEC,KAAK,SACLC,QAjBmB,WACzBf,EAAYR,EAASY,WAiBfS,UAAWG,IAAW,SAAU,UAAW,CACzC,WAAYjB,IAAaP,EAASY,WAJtC,iCAUA,wBACEU,KAAK,SACLC,QAvBiB,WACvBf,EAAYR,EAASiB,SAuBfI,UAAWG,IAAW,SAAU,aAAc,CAC5C,WAAYjB,IAAaP,EAASiB,SAJtC,4BAUA,wBACEK,KAAK,SACLC,QA7Bc,WACpBlB,GAAeD,IA6BTiB,UAAWG,IAAW,SAAU,aAAc,CAC5C,YAAapB,IAJjB,qBAUEK,GAEA,wBACEa,KAAK,SACLC,QAtDe,WACvBlB,GAAc,GACdG,EAAYR,EAASM,OAqDbe,UAAU,4BAHZ,sBAUJ,6BACGX,EAAae,KAAI,SAAAC,GAAI,OACpB,oBAAI,UAAQ,OAAZ,SAA+BA,GAAPA,YCpHlCC,IAASC,OACP,cAAC,EAAD,IACAC,SAASC,eAAe,W","file":"static/js/main.4c0e0259.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport 'bulma/css/bulma.css';\nimport './App.scss';\nimport classNames from 'classnames';\n\nexport const goodsFromServer = [\n  'Dumplings',\n  'Carrot',\n  'Eggs',\n  'Ice cream',\n  'Apple',\n  'Bread',\n  'Fish',\n  'Honey',\n  'Jam',\n  'Garlic',\n];\n\nenum SortType {\n  NONE,\n  ALPHABET,\n  LENGTH,\n}\n\nexport function getReorderedGoods(\n  goods: string[], sortType: SortType, isReversed: boolean,\n) {\n  const visibleGoods = [...goods];\n\n  switch (sortType) {\n    case SortType.ALPHABET:\n      visibleGoods.sort((a, b) => a.localeCompare(b));\n      break;\n\n    case SortType.LENGTH:\n      visibleGoods.sort((a, b) => a.length - b.length);\n      break;\n\n    default:\n      break;\n  }\n\n  if (isReversed) {\n    visibleGoods.reverse();\n  }\n\n  return visibleGoods;\n}\n\nexport const App: React.FC = () => {\n  const [isReversed, setIsReversed] = useState(false);\n  const [sortType, setSortType] = useState(SortType.NONE);\n  const toShowResetButton = isReversed || sortType !== SortType.NONE;\n  const visibleGoods = getReorderedGoods(goodsFromServer, sortType, isReversed);\n\n  const handleResetClick = () => {\n    setIsReversed(false);\n    setSortType(SortType.NONE);\n  };\n\n  const handleAlphabetSort = () => {\n    setSortType(SortType.ALPHABET);\n  };\n\n  const handleLengthSort = () => {\n    setSortType(SortType.LENGTH);\n  };\n\n  const handleReverse = () => {\n    setIsReversed(!isReversed);\n  };\n\n  return (\n    <div className=\"section content\">\n      <div className=\"buttons\">\n        <button\n          type=\"button\"\n          onClick={handleAlphabetSort}\n          className={classNames('button', 'is-info', {\n            'is-light': sortType !== SortType.ALPHABET,\n          })}\n        >\n          Sort alphabetically\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={handleLengthSort}\n          className={classNames('button', 'is-success', {\n            'is-light': sortType !== SortType.LENGTH,\n          })}\n        >\n          Sort by length\n        </button>\n\n        <button\n          type=\"button\"\n          onClick={handleReverse}\n          className={classNames('button', 'is-warning', {\n            'is-light': !isReversed,\n          })}\n        >\n          Reverse\n        </button>\n\n        {(toShowResetButton)\n        && (\n          <button\n            type=\"button\"\n            onClick={handleResetClick}\n            className=\"button is-danger is-light\"\n          >\n            Reset\n          </button>\n        )}\n      </div>\n\n      <ul>\n        {visibleGoods.map(good => (\n          <li data-cy=\"Good\" key={good}>{good}</li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}